#! /usr/bin/env babel-node

import program from 'commander'
import mkdirp from 'mkdirp' // Recursively mkdir. `mkdir -p`
import os from 'os' // Operating System utility functions
import fs from 'fs'
import path from 'path'
import readline from 'readline'
import sortedObject from 'sorted-object'

// Import package.json
import pkg from '../package.json'

// Get package version
const version = pkg.version
const _exit = process.exit

process.exit = exit

program
  .version(version)
  .option('-f, --force', 'force on non-empty files')
  .command('g <file> [otherFiles...]')
  .parse(process.argv)

if (!exit.exited) {
  main()
}

/*
 * Main program
 */

function main () {
  console.log('Hippy up!')
}

/*
 * @param {String} name
 */

function loadFromTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8')
}


/*
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || '0666' })
  console.log('\x1b[36mcreate\x1b[0m : ' + path)
}

/*
 * Gracefully exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}
