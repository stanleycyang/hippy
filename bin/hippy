#! /usr/bin/env node

'use strict';

var program = require('commander');
var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var readline = require('readline-sync');
var colors = require('colors');

var exit = process.exit;

// Grab the version from package.json
var version = require('../package.json').version;

process.exit = exit;

// Files
var files = undefined,
    app = undefined;

program.version(version).option('-f, --force', 'force on a pre-existing file or directory');

program.command('init <name>').description('initialize hippy application').action(function (name) {
  app = name;
});

program.command('g <file> [otherFiles...]').action(function (file, otherFiles) {
  otherFiles.unshift(file);
  files = otherFiles;
});

program.parse(process.argv);

if (!exit.exited) {
  // Execute the main program
  main();
}

/*
 * Main program
 */

function main() {
  if (typeof files === 'undefined' && typeof app === 'undefined') {
    console.error('no command given!'.red);
    process.exit(1);
  }

  console.log('\nStarting Hippy...\n'.random);

  if (app) generateApp(app);
  if (files) generateComponents(files);
}

/*
 * @param {String} name
 */

function generateApp(path) {

  // Load templates
  var README = loadTemplate('app/README.md');
  var gitignore = loadTemplate('app/gitignore');
  var pkg = loadTemplate('app/package.json').replace(/{name}/g, path);
  var www = loadTemplate('app/bin/www');
  var client = loadTemplate('app/client/index.js');
  var App = loadTemplate('app/client/components/App.js');
  var server = loadTemplate('app/server/index.js');
  var route = loadTemplate('app/server/routes/index.js');
  var devConfig = loadTemplate('app/webpack/dev.config.js');
  var prodConfig = loadTemplate('app/webpack/prod.config.js');
  var webpack = loadTemplate('app/webpack/index.js');
  var config = loadTemplate('app/config.js');
  var index = loadTemplate('app/client/views/index.jade');
  var error = loadTemplate('app/client/views/error.jade');
  var layout = loadTemplate('app/client/views/layout.jade');

  mkdir(path + '/bin', function () {
    mkdir(path + '/webpack');
    mkdir(path + '/static');
    mkdir(path + '/server');
    mkdir(path + '/server/routes/');
    mkdir(path + '/client/views');
    mkdir(path + '/client/components', function () {
      write(path + '/README.md', README);
      write(path + '/.gitignore', gitignore);
      write(path + '/config.js', config);
      write(path + '/package.json', pkg);
      write(path + '/bin/www', www, '0755');
      write(path + '/client/index.js', client);
      write(path + '/client/components/App.js', App);
      write(path + '/client/views/index.jade', index);
      write(path + '/client/views/error.jade', error);
      write(path + '/client/views/layout.jade', layout);
      write(path + '/server/index.js', server);
      write(path + '/server/routes/index.js', route);
      write(path + '/webpack/index.js', webpack);
      write(path + '/webpack/dev.config.js', devConfig);
      write(path + '/webpack/prod.config.js', prodConfig);

      console.log(('\n ' + path + ' created! Run \'npm install\' to install dependencies').cyan);
    });
  });
}

/*
 * @param {Array} components
 */

function generateComponents(components) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var component = _step.value;

      // Add the file extension
      component = component.replace(/\.(js|jsx)/g, '') + '.js';
      checkFilePath(component, createFile);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/*
 * @param {String} path
 * @param {Function} fn
 */

function checkFilePath(path, fn) {
  try {
    var stats = fs.lstatSync(path);
    if (stats !== null && (program.force || confirm('The file ' + path + ' already exists. Overwrite? [y/N]'))) {
      // Overwrite
      fn(path);
    } else {
      console.error('abort overwrite'.red);
    }
  } catch (e) {
    switch (e.code) {
      case 'ENOENT':
        // Safe to write
        fn(path);
        break;
      default:
        throw e;
    }
  }
}

/*
 * @param {String} name
 */

function createFile(name) {
  var component = loadTemplate('Component.js');
  var componentName = name.replace(/\.(js|jsx)|(\S+\/)/g, '');
  component = component.replace(/{name}/g, componentName);

  // Write the component
  write(name, component);
}

/*
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || '0666' });
  console.log('created: '.green + path);
}

/*
 * Mkdir -p
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, '0755', function (err) {
    if (err) throw err;
    console.log('created: '.green + path);
    fn && fn();
  });
}

/*
 * Prompt for confirmation to force
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
  var confirm = readline.question(msg);
  return (/^y|yes|ok|true$/i.test(confirm)
  );
}

/*
 * @param {String} name
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Graceful exit
 */

function exit(code) {
  function done() {
    if (! draining--) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function (stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}
