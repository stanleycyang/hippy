#! /usr/bin/env node

'use strict'

// For ES6 in NodeJS
const babel = require('babel/register')

// Source in dependencies
const http = require('http')
const app = require('../server')
const pkg = require('../package.json')

/*
 * Create port
 */
const port = process.env.PORT || '3000'

/*
 * Create HTTP Server
 */

const server = http.createServer(app)

/*
 * Listen on provided port, on all network interfaces
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/*
 * Event listener for HTTP server "error" event
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/*
 * Event listener for HTTP server "listening" event
 */

function onListening() {
  const addr = server.address()
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug(`${pkg.name} is listening on ${bind}`)
  console.log(`${pkg.name} is listening on ${bind}`)
}


